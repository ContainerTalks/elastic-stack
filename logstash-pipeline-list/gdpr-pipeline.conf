cat << EOF > gdpr-pipeline.conf
## Save in: logstash/pipeline/gdpr-pipeline.conf

input {
  file {
    path => [ "/var/log/GDPR/myapplication/myapplication_gdpr.log" ]
  }
}

filter {
  # Parsing three types of GDPR log entries, one at a time
  
  # Pattern for GDPR User Activity log entries
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:loglevel} : action=%{WORD:action} command=%{QS:command} host=%{IPORHOST:host} dest=%{QS:dest} status=%{WORD:status}( result=%{QS:result})?( result_id=%{QS:result_id})? src=%{QS:src} act_id=%{NUMBER:act_id} src_domain=%{IPORHOST:src_domain} user=%{QS:user} object=%{QS:object} object_category=%{QS:object_category} object_id=%{QS:object_id} object_attrs=%{QS:object_attrs}" }
    add_tag => [ "User Activity" ]
    overwrite => [ "host" ]
  }
 
 # Pattern for GDPR Access log entries
  if "_grokparsefailure" in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:loglevel} : action=%{WORD:action} command=%{QS:command} host=%{IPORHOST:host} dest=%{QS:dest} status=%{WORD:status}( result=%{QS:result})?( result_id=%{QS:result_id})? src=%{QS:src} act_id=%{NUMBER:act_id} src_domain=%{IPORHOST:src_domain} user=%{QS:user} duration=%{INT:duration} response_time=%{INT:response_time}" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "Access" ]
        overwrite => [ "host" ]
      }
  }

  # Pattern for GDPR User Management log entries
  if "_grokparsefailure" in [tags] {
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:loglevel} : action=%{WORD:action} command=%{QS:command} host=%{IPORHOST:host} dest=%{QS:dest} status=%{WORD:status}( result=%{QS:result})?( result_id=%{QS:result_id})? src=%{QS:src} act_id=%{NUMBER:act_id} src_domain=%{IPORHOST:src_domain} user=%{QS:user} src_user=%{QS:src_user} user_attrs=%{QS:user_attrs}" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "User Management" ]
        overwrite => [ "host" ]
      }
  }

  date {
    match => [ "time", "ISO8601" ]
    timezone => [ "Europe/Copenhagen" ]
  }
  
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
      hosts => [ "elasticsearch:9200" ]
      user => 'elastic'
      password => 'changeme'
      index => "gdpr_logs"
      id => "gdpr_pipeline_id"
  }
}
EOF